#Options
GenerateScanner = true
GenerateParser = true
Language = C++
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = String
Parser = SLR
#RegularDefinitions

#Tokens
 :[\ \n\t\r\s]+
BINARY_VALUE: [0-1]+
SUM: \+
SUB: \-
DIV: /
MUL: \*
EXP: \*\*
LOG: log
PRINT: print
LPAREN: \(
RPAREN: \)
ASSING: =
ID: [a-zA-Z_][_a-zA-Z0-9]*
SEMICOLON: ;
COMMA: ,
#NonTerminals
<program>
<statement_list>
<statement>
<assing>
<expression>
<term>
<factor>
<unary>
<value>
<f>
<params>
<param_values>
#Grammar
<program> ::= <statement_list>;
<statement_list> ::= <statement> <statement_list> | <statement>;
<statement> ::= <assing> SEMICOLON | <f> SEMICOLON;
<assing> ::= ID #99 ASSING <expression> #0; // 0 indica termino

<expression> ::= <expression> SUM <term> #3 | <expression> SUB <term> #4 | <term>; // P1
<term> ::= <term> MUL <factor> #5 | <term> DIV <factor> #6 | <factor>; // P2
<factor> ::= <factor> EXP <unary> #7 | <unary>; // P#
<unary> ::= LOG <params> #8 | <value>; // P4

<value> ::= ID #1 | BINARY_VALUE #2 | LPAREN <expression> RPAREN;

<f> ::= PRINT <params> #10; 
<params> ::= LPAREN <param_values> RPAREN; 
<param_values> ::= <value> COMMA <param_values> | <value>; 